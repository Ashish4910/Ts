what is foreign key 
what is string 
what is array 
what is different between array and arraylist
what is hashmap
what is hashtree
what is list , and linklist
what is exception


==> What is SQL ?
==> SQL is a Structure Query language 
==> SQL is standard Language for dealing with Relational Database which can be used to create , read ,update ,and Delete database records


===> What is database ?
1. Database is a systematic collection of data which support storage and manuipulation of data in easy way
2. Advantage of database 
                1.Managing large amount of data
                2.Accuracy
                3.Ease of Data Upload
                4.Data security
                5.Data Integrity

==> What is DBMS ?
1. DBMS stand for Database management system 
2. DBMS is a system software responsible for creation , retrieval , update and management of database .
3. DBMS ensures that our data is consistent, organized, and is easily accessible by serving as an interface between the database and its 
   end-users or application software

===> What is RDBMS? How is it different from DBMS?
1.RDBMS stands for Relational Database Management System.
2. The key difference here, compared to DBMS, is that RDBMS stores data in the form of a collection of tables, and relations can be defined between the common fields of these tables.
3. Most modern database management systems like MySQL, Microsoft SQL Server, Oracle, IBM DB2, and Amazon Redshift are based on RDBMS.

==> What is the difference between SQL and MySQL?
1. SQL is a standard language for retrieving and manipulating structured databases.
2. On the contrary, MySQL is a relational database management system, like SQL Server, Oracle or IBM DB2, that is used to manage SQL databases.

==> What are Tables and Fields?
1.A table is an organized collection of data stored in the form of rows and columns.
2. Columns can be categorized as vertical and rows as horizontal.
3. The columns in a table are called fields while the rows can be referred to as records.

==>  What are Constraints in SQL?
1. SQL constraints are used to specify rules for the data in a table.
2. Constraints are used to limit the type of data that can go into a table.
3.This ensures the accuracy and reliability of the data in the table.
4.If there is any violation between the constraint and the data action, the action is aborted.

Type of Constraints ==> 

1. NOT NULL - Restricts NULL value from being inserted into a column.
2. CHECK - Verifies that all values in a field satisfy a condition.
3. DEFAULT - Automatically assigns a default value if no value has been specified for the field.
4. UNIQUE - Ensures unique values to be inserted into the field.
5. INDEX - Indexes a field providing faster retrieval of records.
6. PRIMARY KEY - Uniquely identifies each record in a table.
7. FOREIGN KEY - Ensures referential integrity for a record in another table.

==>  What is a Primary Key?
The PRIMARY KEY constraint uniquely identifies each row in a table. It must contain UNIQUE values and has an implicit NOT NULL constraint.
A table in SQL is strictly restricted to have one and only one primary key, which is comprised of single or multiple fields (columns).

CREATE TABLE Students (   /* Create table with a single field as primary key */
   ID INT NOT NULL
   Name VARCHAR(255)
   PRIMARY KEY (ID)
);

CREATE TABLE Students (   /* Create table with multiple fields as primary key */
   ID INT NOT NULL
   LastName VARCHAR(255)
   FirstName VARCHAR(255) NOT NULL,
   CONSTRAINT PK_Student
   PRIMARY KEY (ID, FirstName)
);

ALTER TABLE Students   /* Set a column as primary key */
ADD PRIMARY KEY (ID);
ALTER TABLE Students   /* Set multiple columns as primary key */
ADD CONSTRAINT PK_Student   /*Naming a Primary Key*/
PRIMARY KEY (ID, FirstName);

==> What is a UNIQUE constraint?
A UNIQUE constraint ensures that all values in a column are different. This provides uniqueness for the column(s) and helps identify each row uniquely. Unlike primary key, there can be multiple unique constraints defined per table. The code syntax for UNIQUE is quite similar to that of PRIMARY KEY and can be used interchangeably.

CREATE TABLE Students (   /* Create table with a single field as unique */
   ID INT NOT NULL UNIQUE
   Name VARCHAR(255)
);

CREATE TABLE Students (   /* Create table with multiple fields as unique */
   ID INT NOT NULL
   LastName VARCHAR(255)
   FirstName VARCHAR(255) NOT NULL
   CONSTRAINT PK_Student
   UNIQUE (ID, FirstName)
);

ALTER TABLE Students   /* Set a column as unique */
ADD UNIQUE (ID);
ALTER TABLE Students   /* Set multiple columns as unique */
ADD CONSTRAINT PK_Student   /* Naming a unique constraint */
UNIQUE (ID, FirstName);


==>  What is a Foreign Key?
A FOREIGN KEY comprises of single or collection of fields in a table that essentially refers to the PRIMARY KEY in another table. Foreign key constraint ensures referential integrity in the relation between two tables.
The table with the foreign key constraint is labeled as the child table, and the table containing the candidate key is labeled as the referenced or parent table.

CREATE TABLE Students (   /* Create table with foreign key - Way 1 */
   ID INT NOT NULL
   Name VARCHAR(255)
   LibraryID INT
   PRIMARY KEY (ID)
   FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID)
);

CREATE TABLE Students (   /* Create table with foreign key - Way 2 */
   ID INT NOT NULL PRIMARY KEY
   Name VARCHAR(255)
   LibraryID INT FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID)
);

ALTER TABLE Students   /* Add a new foreign key */
ADD FOREIGN KEY (LibraryID)
REFERENCES Library (LibraryID);

==================Joins ========================

==> What is joins ? 
1. SQL joins statement is used to combine rows of data from two aur more table based on a common column(Field) between them .

==> What is Inner Joins ?
1. SQl Inner joins statement return all the row from multiple table as long as condition are met 

Select * from 
Table_A 
Inner join  Tabel_B;

or 

Select * From 
Table_A 
join Table_B ;

==> What is Left Joins ?
1. SQL Left Joins statemnt return all the recored(row) from left table and matching rows from right table.

Select * form
Table_A 
left join Table_B
on Table_A.id = Table_B.id;

==> What is Right Joins ?
1. SQL Right Joins statement return all the record (row) from Right Table and matching record form left table .

Select * from 
Table a 
right join 
table b 
on a.id = b.id;

===>What is  FULL (OUTER) JOIN ?
1. Retrieves all the records where there is a match in either the left or right table.

SELECT *
FROM Table_A A
FULL JOIN Table_B B
ON A.col = B.col

==> What is a Self-Join ?
1. A self JOIN is a case of regular join where a table is joined to itself based on some relation between its own column(s). 
2. Self-join uses the INNER JOIN or LEFT JOIN clause and a table alias is used to assign different names to the table within the query.

SELECT A.emp_id AS "Emp_ID",A.emp_name AS "Employee",
B.emp_id AS "Sup_ID",B.emp_name AS "Supervisor"
FROM employee A, employee B
WHERE A.emp_sup = B.emp_id;


==> What is Cross Join ?
1. A cross join in SQL , also known as a Cartesian join,
2. It is a type of join operation in SQL that combines each row from the first table with every row from the second table, resulting in a Cartesian product. 
3. Unlike other join types that rely on specific join conditions, a cross join does not have any explicit join condition specified in the query.

SELECT *
FROM table1
CROSS JOIN table2;


==> What is an Index? Explain its different types ?
1. An index is a data structure in a database that improves the speed of data retrieval operations on a table.
2. It helps in finding specific data quickly. Imagine you have a huge book (database), and instead of reading through every page to find what you need, you have an index at the back that tells you exactly which page to look at.

There are different types of indexes that can be created for different purposes:
1.Unique and Non-Unique Index:
2.Clustered and Non-Clustered Index:


==> Unique Index:==>
1. Unique Index: Think of it like a unique ID number assigned to each row in a table. 
2.It ensures that each row is distinct, like each person having a unique social security number.

==>Non-Unique  Index==>
1. Non-Unique Index: It's more like an index in a library.
2.Different books might have the same subject index, but it helps in finding them faster.


==>Clustered  Index: 
1. Clustered indexes are indexes whose order of the rows in the database corresponds to the order of the rows in the index.
2.This is why only one clustered index can exist in a given table, whereas, multiple non-clustered indexes can exist in the table.
==> example ==> 
Clustered Index: Imagine a book where the pages are arranged in alphabetical order of the chapter titles. So, if you're looking for a specific chapter, you know exactly where to find it without flipping through the whole book. This is what a clustered index doesâ€”it physically arranges the data in the order of the index.

==>Non-Clustered Index :
1. non-clustered indexes is that the database manager attempts to keep the data in the database in the same order as the corresponding keys appear in the clustered index.

example ==>
Non-Clustered Index: This is like having an index at the end of the book that tells you where each chapter is located. It doesn't change the physical order of the pages; instead, it's like a separate list pointing to the actual data.


==> What is the difference between Clustered and Non-clustered index?
As explained above, the differences can be broken down into three small factors -

1. Clustered index modifies the way records are stored in a database based on the indexed column. A non-clustered index creates a separate entity within the table which references the original table.
2. Clustered index is used for easy and speedy retrieval of data from the database, whereas, fetching records from the non-clustered index is relatively slower.
3. In SQL, a table can have a single clustered index whereas it can have multiple non-clustered indexes

==> What is Data Integrity?
1. Data Integrity is the assurance of accuracy and consistency of data over its entire life-cycle and is a critical aspect of the design
example ==>
These are like the rules you follow when baking. For instance, if the recipe says "use 2 cups of flour," you don't use 3 cups. Similarly, integrity constraints set rules for how data should be entered into a system or database, ensuring it meets certain standards or business rules.


==> What is a Query?
1. A query is a request for data or information from a database table or combination of tables. 
2. A database query can be either a select query or an action query.

==> What is a Subquery? What are its types?
1. A subquery is a query within another query, also known as a nested query or inner query. 

example==>
Imagine you have a database of students and their grades. You might want to know who the top-performing students are in a particular class. But to find that out, you first need to know what the highest grade is. So, you'd ask the database to find the highest grade first (that's the subquery), and then use that result to find the students who got that grade (the main query).

==> What is the SELECT statement?
1. SELECT operator in SQL is used to select data from a database. 
2. The data returned is stored in a result table, called the result-set.
example ==>
SELECT * FROM myDB.students;

==> What are some common clauses used with SELECT query in SQL?

1. WHERE clause in SQL is used to filter records that are necessary, based on specific conditions.
2. ORDER BY clause in SQL is used to sort the records based on some field(s) in ascending (ASC) or descending order (DESC).

example==>

SELECT *
FROM myDB.students
WHERE graduation_year = 2019
ORDER BY studentID DESC;


3. GROUP BY clause in SQL is used to group records with identical data and can be used in conjunction with some aggregation functions to produce summarized results from the database.
4. HAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since the WHERE clause cannot filter aggregated records.

example==>
SELECT COUNT(studentId), country
FROM myDB.students
WHERE country != "INDIA"
GROUP BY country
HAVING COUNT(studentID) > 5;

==> What is cursor ?

can be done futher ::==>



==> What are Entities and Relationships?
1. Entity: An entity can be a real-world object, either tangible or intangible, that can be easily identifiable. 
2. For example, in a college database, students, professors, workers, departments, and projects can be referred to as entities. Each entity has some associated properties that provide it an identity.

3. Relationships: Relations or links between entities that have something to do with each other. For example - The employee's table in a company's database can be associated with the salary table in the same database.


==> List the different types of relationships in SQL.
1. One-to-One - This can be defined as the relationship between two tables where each record in one table is associated with the maximum of one record in the other table.
2. One-to-Many & Many-to-One - This is the most commonly used relationship where a record in a table is associated with multiple records in the other table.
3. Many-to-Many - This is used in cases when multiple instances on both sides are needed for defining a relationship.
4. Self-Referencing Relationships - This is used when a table needs to define a relationship with itself

==> What is a View?
1. A view in SQL is a virtual table based on the result-set of an SQL statement.
2. A view contains rows and columns, just like a real table. 

==> What is Normalization?
1. Normalization represents the way of organizing structured data in the database efficiently.
2. It includes the creation of tables, establishing relationships between them, and defining rules for those relationships. 


==> what is Denormalization:
1. Denormalization is like streamlining or simplifying your database to make it run faster.
2. It's the opposite of normalization, which is all about organizing data efficiently.
3. Instead of keeping data super organized (normalized), denormalization adds some redundancy for speed.
4. Basically, it trades off a bit of organization for faster performance.

==> Why Denormalize:
Imagine you have a huge library with books organized perfectly on shelves by genre, author, and title (that's like normalization).
Now, say you want to find all the books written by a specific author. With the library super organized, you'd have to check multiple shelves (tables) to find them all, which could take a while.
So, denormalization is like having a separate shelf (table) where you keep copies of all the books by each author. It's a bit redundant (since some books might appear on multiple shelves), but it makes finding books by a specific author much faster.

note :=>
Denormalization might seem like breaking the rules of organization, but it's all about making your database run faster and more efficiently. By adding a bit of redundancy, you can speed up queries and simplify your database structure.


==> What are the TRUNCATE, DELETE and DROP statements?
1. DELETE statement is used to delete rows from a table.

example=>

DELETE FROM Candidates
WHERE CandidateId > 1000;

2. TRUNCATE command is used to delete all the rows from the table and free the space containing the table.

example =>
TRUNCATE TABLE Candidates;

3. DROP command is used to remove an object from the database. If you drop a table, all the rows in the table are deleted and the table structure is removed from the database.

example=>

DROP TABLE Candidates;


==> What are Aggregate and Scalar functions?
1. An aggregate function performs operations on a collection of values to return a single scalar value. 
2.Aggregate functions are often used with the GROUP BY and HAVING clauses of the SELECT statement. Following are the widely used SQL aggregate functions:

1. AVG() - Calculates the mean of a collection of values.
2. COUNT() - Counts the total number of records in a specific table or view.
3. MIN() - Calculates the minimum of a collection of values.
4. MAX() - Calculates the maximum of a collection of values.
5. SUM() - Calculates the sum of a collection of values.
6. FIRST() - Fetches the first element in a collection of values.
7. LAST() - Fetches the last element in a collection of values.
Note: All aggregate functions described above ignore NULL values except for the COUNT function.

==> A scalar function returns a single value based on the input value. Following are the widely used SQL scalar functions:

1. LEN() - Calculates the total length of the given field (column).
2. UCASE() - Converts a collection of string values to uppercase characters.
3. LCASE() - Converts a collection of string values to lowercase characters.
4. MID() - Extracts substrings from a collection of string values in a table.
5. CONCAT() - Concatenates two or more strings.
6.RAND() - Generates a random collection of numbers of a given length.
7.ROUND() - Calculates the round-off integer value for a numeric field (or decimal point values).
8. NOW() - Returns the current date & time.
9. FORMAT() - Sets the format to display a collection of values
